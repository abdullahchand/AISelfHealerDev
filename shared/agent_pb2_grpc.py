# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import agent_pb2 as agent__pb2


class AgentServiceStub(object):
    """Service for communication between Master and Worker agents
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/ai_runtime.AgentService/Heartbeat',
                request_serializer=agent__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=agent__pb2.HeartbeatResponse.FromString,
                )
        self.ReportStatus = channel.unary_unary(
                '/ai_runtime.AgentService/ReportStatus',
                request_serializer=agent__pb2.StatusReport.SerializeToString,
                response_deserializer=agent__pb2.StatusResponse.FromString,
                )
        self.AssignTask = channel.unary_unary(
                '/ai_runtime.AgentService/AssignTask',
                request_serializer=agent__pb2.TaskAssignment.SerializeToString,
                response_deserializer=agent__pb2.TaskResponse.FromString,
                )
        self.NotifyIssue = channel.unary_unary(
                '/ai_runtime.AgentService/NotifyIssue',
                request_serializer=agent__pb2.IssueNotification.SerializeToString,
                response_deserializer=agent__pb2.IssueResponse.FromString,
                )
        self.ExecuteAction = channel.unary_unary(
                '/ai_runtime.AgentService/ExecuteAction',
                request_serializer=agent__pb2.ActionRequest.SerializeToString,
                response_deserializer=agent__pb2.ActionResponse.FromString,
                )
        self.SyncState = channel.unary_unary(
                '/ai_runtime.AgentService/SyncState',
                request_serializer=agent__pb2.StateSync.SerializeToString,
                response_deserializer=agent__pb2.StateResponse.FromString,
                )


class AgentServiceServicer(object):
    """Service for communication between Master and Worker agents
    """

    def Heartbeat(self, request, context):
        """Heartbeat from worker to master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportStatus(self, request, context):
        """Worker reports status to master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Master assigns tasks to worker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyIssue(self, request, context):
        """Worker notifies master of issues
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAction(self, request, context):
        """Master requests worker to perform action
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncState(self, request, context):
        """Environment state synchronization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=agent__pb2.HeartbeatRequest.FromString,
                    response_serializer=agent__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ReportStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportStatus,
                    request_deserializer=agent__pb2.StatusReport.FromString,
                    response_serializer=agent__pb2.StatusResponse.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=agent__pb2.TaskAssignment.FromString,
                    response_serializer=agent__pb2.TaskResponse.SerializeToString,
            ),
            'NotifyIssue': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyIssue,
                    request_deserializer=agent__pb2.IssueNotification.FromString,
                    response_serializer=agent__pb2.IssueResponse.SerializeToString,
            ),
            'ExecuteAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAction,
                    request_deserializer=agent__pb2.ActionRequest.FromString,
                    response_serializer=agent__pb2.ActionResponse.SerializeToString,
            ),
            'SyncState': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncState,
                    request_deserializer=agent__pb2.StateSync.FromString,
                    response_serializer=agent__pb2.StateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_runtime.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """Service for communication between Master and Worker agents
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/Heartbeat',
            agent__pb2.HeartbeatRequest.SerializeToString,
            agent__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/ReportStatus',
            agent__pb2.StatusReport.SerializeToString,
            agent__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/AssignTask',
            agent__pb2.TaskAssignment.SerializeToString,
            agent__pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyIssue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/NotifyIssue',
            agent__pb2.IssueNotification.SerializeToString,
            agent__pb2.IssueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/ExecuteAction',
            agent__pb2.ActionRequest.SerializeToString,
            agent__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_runtime.AgentService/SyncState',
            agent__pb2.StateSync.SerializeToString,
            agent__pb2.StateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
